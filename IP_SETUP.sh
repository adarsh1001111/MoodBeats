#!/bin/bash

# This script sets up the correct IP address in all the necessary files
# to enable communication between the mobile device and the laptop

# Make script executable
chmod +x "$0"

# Get the laptop's IP address - try different methods until one works
echo "🔍 Finding your laptop's IP address..."

# Try ifconfig first
if command -v ifconfig &> /dev/null; then
    IP=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | head -n 1)
# Try ip addr if ifconfig isn't available
elif command -v ip &> /dev/null; then
    IP=$(ip addr show | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | cut -d/ -f1 | head -n 1)
# Fallback to hostname
else
    IP=$(hostname -I | awk '{print $1}')
fi

# If we still couldn't get an IP, ask the user
if [ -z "$IP" ]; then
    echo "❌ Couldn't determine your IP address automatically."
    echo "Please enter your laptop's IP address (e.g., 192.168.1.123):"
    read IP
fi

echo "✅ Using IP address: $IP"
echo ""

# Update the files with the correct IP address
echo "🔄 Updating API URLs in the code..."

# Update EnhancedMoodPredictionService.ts - replace any IP address or localhost with the new IP
sed -i.bak "s|const API_URL = '.*|const API_URL = 'http://$IP:5000/api';|g" ./src/services/EnhancedMoodPredictionService.ts

# Create or update IP address storage in the app - this updates the ml_api_setup.js file
cat > ./src/utils/ml_api_setup.js << EOL
// This file is auto-generated by IP_SETUP.sh
// Do not edit manually

import AsyncStorage from '@react-native-async-storage/async-storage';

// Set up the ML API URL in AsyncStorage
export async function setupMlApiUrl() {
  try {
    // Store the ML API URL in AsyncStorage
    await AsyncStorage.setItem('ml_api_url', 'http://$IP:5000/api');
    console.log('ML API URL set to: http://$IP:5000/api');
    return true;
  } catch (error) {
    console.error('Error setting ML API URL:', error);
    return false;
  }
}

// Call this function when the app starts
export default setupMlApiUrl;
EOL

echo "✅ Created ml_api_setup.js with IP: $IP"

# Update the start_with_ml.sh script to use the correct IP
sed -i.bak "s|http://.*:5000/api/health|http://$IP:5000/api/health|g" ./start_with_ml.sh

# Update App.tsx to call the setup function
if ! grep -q "setupMlApiUrl" ./App.tsx; then
  # Add the import at the top of the file
  sed -i.bak "0,/^import/s/^import/import setupMlApiUrl from '.\/src\/utils\/ml_api_setup';\nimport/" ./App.tsx
  
  # Add the function call in the first useEffect
  sed -i.bak "/useEffect(/,/\}/s/^  \/\/ Initialize services on app startup/  \/\/ Initialize services on app startup\n    setupMlApiUrl(); \/\/ Setup ML API URL/" ./App.tsx
fi

# Clean up backup files
find . -name "*.bak" -type f -delete

echo "✅ All files updated successfully with IP address: $IP"
echo ""
echo "📝 Updated or created these files:"
echo "   - src/services/EnhancedMoodPredictionService.ts"
echo "   - src/utils/ml_api_setup.js"
echo "   - start_with_ml.sh"
echo "   - App.tsx"
echo ""
echo "🚀 Now you can run the app with:"
echo "   ./start_app.sh"
echo ""
echo "📱 The Expo Go app on your phone should now be able to connect to the Flask server"
echo "   running on your laptop when both are on the same WiFi network."
